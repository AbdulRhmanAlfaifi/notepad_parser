use crate::unsaved_chunks::UnsavedChunks;
use crate::NotepadTabStat;
use glob::glob;
use serde_json;

const SAMPLES_DIR_NAME: &str = "samples";

//Start: Utils
fn get_paths_from_glob(glob_path: &str) -> Vec<String> {
    let res = glob(glob_path)
        .unwrap()
        .into_iter()
        .map(|x| x.unwrap().to_string_lossy().to_string())
        .collect::<Vec<String>>();

    if res.len() == 0 {
        panic!("Glob list is empty!");
    }

    res
}

fn check_rtl(data: &NotepadTabStat) -> bool {
    data.config_block.rtl
}

fn check_word_wrap(data: &NotepadTabStat) -> bool {
    data.config_block.word_wrap
}

fn check_unsaved_chunks(data: &NotepadTabStat) -> bool {
    match data.unsaved_chunks {
        Some(_) => true,
        None => false,
    }
}

fn check_is_saved(data: &NotepadTabStat) -> bool {
    data.is_saved_file
}

#[allow(dead_code)]
fn check_contain_unsaved_data(data: &NotepadTabStat) -> bool {
    data.contain_unsaved_data
}

// End: Utils

#[cfg(test)]
#[test]
fn tabstate_no_path() {
    let data: [u8; 0x3D] = [
        0x4E, 0x50, 0x00, 0x00, 0x01, 0x15, 0x15, 0x01, 0x00, 0x00, 0x02, 0x01, 0x01, 0x15, 0x50,
        0x00, 0x61, 0x00, 0x73, 0x00, 0x73, 0x00, 0x77, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x64, 0x00,
        0x20, 0x00, 0x69, 0x00, 0x73, 0x00, 0x20, 0x00, 0x61, 0x00, 0x62, 0x00, 0x63, 0x00, 0x64,
        0x00, 0x20, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 0x01, 0xDD, 0xBD, 0x91,
        0xE1,
    ];
    let mut reader = &data[..];
    let res = NotepadTabStat::from_reader(&mut reader).unwrap();
    let json = serde_json::to_string_pretty(&res).unwrap();
    println!("{}", json);
}

#[cfg(test)]
#[test]
fn tabstate_has_path_arabic_test() {
    let data: [u8; 0xB6] = [
        0x4E, 0x50, 0x00, 0x01, 0x19, 0x43, 0x00, 0x3A, 0x00, 0x5C, 0x00, 0x57, 0x00, 0x69, 0x00,
        0x6E, 0x00, 0x64, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x73, 0x00, 0x5C, 0x00, 0x54, 0x00, 0x65,
        0x00, 0x6D, 0x00, 0x70, 0x00, 0x5C, 0x00, 0x2A, 0x06, 0x2C, 0x06, 0x31, 0x06, 0x28, 0x06,
        0x29, 0x06, 0x2E, 0x00, 0x74, 0x00, 0x78, 0x00, 0x74, 0x00, 0x2C, 0x02, 0x01, 0x97, 0x83,
        0x84, 0x89, 0xDE, 0xB8, 0xB9, 0xED, 0x01, 0xA0, 0x41, 0x6E, 0xAD, 0x5D, 0xC8, 0x6E, 0xDD,
        0xFD, 0x52, 0x8D, 0x13, 0x72, 0x36, 0x1A, 0x8D, 0xEA, 0xC6, 0x5D, 0x32, 0x92, 0x83, 0x6B,
        0x0E, 0x51, 0x5D, 0x1D, 0x31, 0x1C, 0x0F, 0xCA, 0x8A, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00,
        0x00, 0x02, 0x01, 0x01, 0x15, 0x47, 0x06, 0x30, 0x06, 0x4A, 0x06, 0x20, 0x00, 0x2A, 0x06,
        0x2C, 0x06, 0x31, 0x06, 0x28, 0x06, 0x29, 0x06, 0x2C, 0x00, 0x20, 0x00, 0x27, 0x06, 0x44,
        0x06, 0x45, 0x06, 0x44, 0x06, 0x41, 0x06, 0x20, 0x00, 0x45, 0x06, 0x2D, 0x06, 0x41, 0x06,
        0x48, 0x06, 0x00, 0x22, 0x1F, 0x14, 0x5E, 0x00, 0x00, 0x01, 0x37, 0x06, 0xBE, 0x84, 0x98,
        0x2B, 0x00, 0x01, 0x00, 0xE6, 0x5A, 0xE8, 0x53, 0x15, 0x00, 0x01, 0x38, 0x06, 0x91, 0x1C,
        0x9C, 0x16,
    ];
    let mut reader = &data[..];
    let res = NotepadTabStat::from_reader(&mut reader).unwrap();
    let json = serde_json::to_string_pretty(&res).unwrap();
    println!("{}", json);
}

#[cfg(test)]
#[test]
fn tabstate_has_path_english_contain_unsaved_chunks_test() {
    let data: [u8; 0x15F] = [
        0x4E, 0x50, 0x00, 0x01, 0x18, 0x43, 0x00, 0x3A, 0x00, 0x5C, 0x00, 0x57, 0x00, 0x69, 0x00,
        0x6E, 0x00, 0x64, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x73, 0x00, 0x5C, 0x00, 0x54, 0x00, 0x65,
        0x00, 0x6D, 0x00, 0x70, 0x00, 0x5C, 0x00, 0x74, 0x00, 0x65, 0x00, 0x73, 0x00, 0x74, 0x00,
        0x2E, 0x00, 0x74, 0x00, 0x78, 0x00, 0x74, 0x00, 0x20, 0x05, 0x01, 0xE1, 0x8F, 0xA1, 0xB4,
        0x8F, 0xBC, 0xBA, 0xED, 0x01, 0xC6, 0x0D, 0x8F, 0xFB, 0xD2, 0xFF, 0x96, 0x9A, 0x36, 0xBF,
        0xFC, 0xA3, 0x1F, 0x60, 0x9E, 0x80, 0x1E, 0x8E, 0x0B, 0x8D, 0xE4, 0x15, 0x68, 0xE9, 0x48,
        0xDB, 0xEB, 0xAC, 0x1B, 0xD9, 0xB2, 0xE4, 0x00, 0x01, 0x1F, 0x1F, 0x01, 0x00, 0x00, 0x02,
        0x01, 0x01, 0x1F, 0x46, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x20, 0x00, 0x73, 0x00,
        0x61, 0x00, 0x76, 0x00, 0x65, 0x00, 0x64, 0x00, 0x20, 0x00, 0x74, 0x00, 0x65, 0x00, 0x73,
        0x00, 0x74, 0x00, 0x0D, 0x00, 0x46, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x20, 0x00,
        0x73, 0x00, 0x61, 0x00, 0x76, 0x00, 0x65, 0x00, 0x64, 0x00, 0x20, 0x00, 0x74, 0x00, 0x65,
        0x00, 0x73, 0x00, 0x74, 0x00, 0x00, 0xF4, 0x4C, 0x93, 0xE7, 0x1F, 0x00, 0x01, 0x0D, 0x00,
        0x90, 0xFE, 0xE3, 0x34, 0x20, 0x00, 0x01, 0x74, 0x00, 0x4D, 0x72, 0x0E, 0xDC, 0x21, 0x00,
        0x01, 0x68, 0x00, 0x96, 0x65, 0x7A, 0x31, 0x22, 0x00, 0x01, 0x69, 0x00, 0xC8, 0xDE, 0x31,
        0xA0, 0x23, 0x00, 0x01, 0x73, 0x00, 0x45, 0x93, 0xE2, 0xCB, 0x24, 0x00, 0x01, 0x20, 0x00,
        0x66, 0x25, 0x30, 0x4C, 0x25, 0x00, 0x01, 0x61, 0x00, 0xB2, 0x27, 0x67, 0xB8, 0x26, 0x00,
        0x01, 0x20, 0x00, 0x1C, 0xE5, 0x63, 0x2C, 0x26, 0x01, 0x00, 0xDA, 0x9A, 0xD2, 0x01, 0x25,
        0x01, 0x00, 0xD8, 0xDC, 0x6C, 0x58, 0x25, 0x00, 0x01, 0x69, 0x00, 0x7A, 0xFE, 0xED, 0xB0,
        0x26, 0x00, 0x01, 0x73, 0x00, 0x8D, 0x73, 0x6D, 0xBB, 0x27, 0x00, 0x01, 0x20, 0x00, 0x21,
        0x85, 0x4A, 0x9C, 0x28, 0x00, 0x01, 0x75, 0x00, 0x64, 0x19, 0x74, 0x5C, 0x29, 0x00, 0x01,
        0x6E, 0x00, 0xF0, 0x4F, 0x96, 0x76, 0x2A, 0x00, 0x01, 0x73, 0x00, 0x48, 0x83, 0x80, 0xBA,
        0x2B, 0x00, 0x01, 0x61, 0x00, 0x0D, 0x17, 0xD9, 0xD9, 0x2C, 0x00, 0x01, 0x76, 0x00, 0xBA,
        0xB4, 0x81, 0x5F, 0x2D, 0x00, 0x01, 0x65, 0x00, 0xE6, 0x3B, 0xE9, 0x7D, 0x2E, 0x00, 0x01,
        0x64, 0x00, 0xB8, 0x80, 0xA2, 0xEC,
    ];
    let mut reader = &data[..];
    let res = NotepadTabStat::from_reader(&mut reader).unwrap();
    let json = serde_json::to_string_pretty(&res).unwrap();
    println!("{}", json);
}

#[cfg(test)]
#[test]
fn tabstate_has_path_english_test() {
    let data: [u8; 0xAF] = [
        0x4E, 0x50, 0x00, 0x01, 0x18, 0x43, 0x00, 0x3A, 0x00, 0x5C, 0x00, 0x57, 0x00, 0x69, 0x00,
        0x6E, 0x00, 0x64, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x73, 0x00, 0x5C, 0x00, 0x54, 0x00, 0x65,
        0x00, 0x6D, 0x00, 0x70, 0x00, 0x5C, 0x00, 0x74, 0x00, 0x65, 0x00, 0x73, 0x00, 0x74, 0x00,
        0x2E, 0x00, 0x74, 0x00, 0x78, 0x00, 0x74, 0x00, 0x20, 0x05, 0x01, 0xE1, 0x8F, 0xA1, 0xB4,
        0x8F, 0xBC, 0xBA, 0xED, 0x01, 0xC6, 0x0D, 0x8F, 0xFB, 0xD2, 0xFF, 0x96, 0x9A, 0x36, 0xBF,
        0xFC, 0xA3, 0x1F, 0x60, 0x9E, 0x80, 0x1E, 0x8E, 0x0B, 0x8D, 0xE4, 0x15, 0x68, 0xE9, 0x48,
        0xDB, 0xEB, 0xAC, 0x1B, 0xD9, 0xB2, 0xE4, 0x00, 0x01, 0x1F, 0x1F, 0x01, 0x00, 0x00, 0x02,
        0x01, 0x01, 0x1F, 0x46, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x20, 0x00, 0x73, 0x00,
        0x61, 0x00, 0x76, 0x00, 0x65, 0x00, 0x64, 0x00, 0x20, 0x00, 0x74, 0x00, 0x65, 0x00, 0x73,
        0x00, 0x74, 0x00, 0x0D, 0x00, 0x46, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x20, 0x00,
        0x73, 0x00, 0x61, 0x00, 0x76, 0x00, 0x65, 0x00, 0x64, 0x00, 0x20, 0x00, 0x74, 0x00, 0x65,
        0x00, 0x73, 0x00, 0x74, 0x00, 0x00, 0xF4, 0x4C, 0x93, 0xE7,
    ];
    let mut reader = &data[..];
    let res = NotepadTabStat::from_reader(&mut reader).unwrap();
    let json = serde_json::to_string_pretty(&res).unwrap();
    println!("{}", json);
}

#[cfg(test)]
#[test]
fn error_test() {
    let data: [u8; 0xAF] = [
        0x41, 0x50, 0x00, 0x01, 0x18, 0x43, 0x00, 0x3A, 0x00, 0x5C, 0x00, 0x57, 0x00, 0x69, 0x00,
        0x6E, 0x00, 0x64, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x73, 0x00, 0x5C, 0x00, 0x54, 0x00, 0x65,
        0x00, 0x6D, 0x00, 0x70, 0x00, 0x5C, 0x00, 0x74, 0x00, 0x65, 0x00, 0x73, 0x00, 0x74, 0x00,
        0x2E, 0x00, 0x74, 0x00, 0x78, 0x00, 0x74, 0x00, 0x20, 0x05, 0x01, 0xE1, 0x8F, 0xA1, 0xB4,
        0x8F, 0xBC, 0xBA, 0xED, 0x01, 0xC6, 0x0D, 0x8F, 0xFB, 0xD2, 0xFF, 0x96, 0x9A, 0x36, 0xBF,
        0xFC, 0xA3, 0x1F, 0x60, 0x9E, 0x80, 0x1E, 0x8E, 0x0B, 0x8D, 0xE4, 0x15, 0x68, 0xE9, 0x48,
        0xDB, 0xEB, 0xAC, 0x1B, 0xD9, 0xB2, 0xE4, 0x00, 0x01, 0x1F, 0x1F, 0x01, 0x00, 0x00, 0x02,
        0x01, 0x01, 0x1F, 0x46, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x20, 0x00, 0x73, 0x00,
        0x61, 0x00, 0x76, 0x00, 0x65, 0x00, 0x64, 0x00, 0x20, 0x00, 0x74, 0x00, 0x65, 0x00, 0x73,
        0x00, 0x74, 0x00, 0x0D, 0x00, 0x46, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x20, 0x00,
        0x73, 0x00, 0x61, 0x00, 0x76, 0x00, 0x65, 0x00, 0x64, 0x00, 0x20, 0x00, 0x74, 0x00, 0x65,
        0x00, 0x73, 0x00, 0x74, 0x00, 0x00, 0xF4, 0x4C, 0x93, 0xE7,
    ];
    let mut reader = &data[..];
    match NotepadTabStat::from_reader(&mut reader) {
        Ok(_) => panic!("You shouldn't see this!"),
        Err(e) => println!("{}", e),
    }
}

#[cfg(test)]
#[test]
fn tabstat_unsaved_chunks() {
    // Addition at random positions
    let data: [u8; 0x12A] = [
        0x1F, 0x00, 0x01, 0x0D, 0x00, 0x90, 0xFE, 0xE3, 0x34, 0x20, 0x00, 0x01, 0x74, 0x00, 0x4D,
        0x72, 0x0E, 0xDC, 0x21, 0x00, 0x01, 0x68, 0x00, 0x96, 0x65, 0x7A, 0x31, 0x22, 0x00, 0x01,
        0x69, 0x00, 0xC8, 0xDE, 0x31, 0xA0, 0x23, 0x00, 0x01, 0x73, 0x00, 0x45, 0x93, 0xE2, 0xCB,
        0x24, 0x00, 0x01, 0x20, 0x00, 0x66, 0x25, 0x30, 0x4C, 0x25, 0x00, 0x01, 0x61, 0x00, 0xB2,
        0x27, 0x67, 0xB8, 0x26, 0x00, 0x01, 0x20, 0x00, 0x1C, 0xE5, 0x63, 0x2C, 0x26, 0x01, 0x00,
        0xDA, 0x9A, 0xD2, 0x01, 0x25, 0x01, 0x00, 0xD8, 0xDC, 0x6C, 0x58, 0x25, 0x00, 0x01, 0x69,
        0x00, 0x7A, 0xFE, 0xED, 0xB0, 0x26, 0x00, 0x01, 0x73, 0x00, 0x8D, 0x73, 0x6D, 0xBB, 0x27,
        0x00, 0x01, 0x20, 0x00, 0x21, 0x85, 0x4A, 0x9C, 0x28, 0x00, 0x01, 0x75, 0x00, 0x64, 0x19,
        0x74, 0x5C, 0x29, 0x00, 0x01, 0x6E, 0x00, 0xF0, 0x4F, 0x96, 0x76, 0x2A, 0x00, 0x01, 0x73,
        0x00, 0x48, 0x83, 0x80, 0xBA, 0x2B, 0x00, 0x01, 0x61, 0x00, 0x0D, 0x17, 0xD9, 0xD9, 0x2C,
        0x00, 0x01, 0x76, 0x00, 0xBA, 0xB4, 0x81, 0x5F, 0x2D, 0x00, 0x01, 0x65, 0x00, 0xE6, 0x3B,
        0xE9, 0x7D, 0x2E, 0x00, 0x01, 0x64, 0x00, 0xB8, 0x80, 0xA2, 0xEC, 0x16, 0x01, 0x00, 0xFE,
        0xF1, 0x37, 0x91, 0x01, 0x01, 0x00, 0xE7, 0x98, 0x82, 0x64, 0x1B, 0x00, 0x01, 0x61, 0x00,
        0xAC, 0x36, 0x61, 0x5F, 0x1C, 0x00, 0x01, 0x61, 0x00, 0x1E, 0x16, 0xBD, 0x4F, 0x1D, 0x00,
        0x01, 0x61, 0x00, 0x23, 0x76, 0x94, 0xFF, 0x1E, 0x00, 0x01, 0x62, 0x00, 0x4F, 0xFB, 0xBD,
        0xEC, 0x1F, 0x00, 0x01, 0x62, 0x00, 0x72, 0x9B, 0x94, 0x5C, 0x0C, 0x00, 0x01, 0x73, 0x00,
        0x06, 0x02, 0x5A, 0x1E, 0x0D, 0x00, 0x01, 0x73, 0x00, 0x3B, 0x62, 0x73, 0xAE, 0x0E, 0x00,
        0x01, 0x73, 0x00, 0x7C, 0xC2, 0x09, 0x7E, 0x14, 0x00, 0x01, 0x63, 0x00, 0x1C, 0x50, 0x94,
        0x0C, 0x15, 0x00, 0x01, 0x63, 0x00, 0x21, 0x30, 0xBD, 0xBC, 0x16, 0x00, 0x01, 0x63, 0x00,
        0x66, 0x90, 0xC7, 0x6C, 0x17, 0x00, 0x01, 0x63, 0x00, 0x5B, 0xF0, 0xEE, 0xDC,
    ];
    let mut reader = &data[..];
    let res = UnsavedChunks::from_reader(&mut reader).unwrap();
    let json = serde_json::to_string_pretty(&res).unwrap();
    // println!("{}", res);
    println!("{}", json);
}

// Start: English language tests

#[cfg(test)]
#[test]
fn tabstat_sample_saved_english_unsaved_mod() {
    let path = format!("./{}/saved/english/unsaved_mod/*.bin", SAMPLES_DIR_NAME);
    println!("AAAA");
    println!("{}", SAMPLES_DIR_NAME);
    for path in get_paths_from_glob(&path) {
        let data = NotepadTabStat::from_path(&path).unwrap();

        assert!(
            check_unsaved_chunks(&data),
            "Didn't extract unsaved data chunck. DATA: {:?}",
            data
        );
        assert!(
            check_is_saved(&data),
            "is_saved_file is reported to be unset, but it should be"
        );
    }
}

#[cfg(test)]
#[test]
fn tabstat_sample_saved_english_rtl_unset() {
    let path = format!("./{}/saved/english/rtl_unset/*.bin", SAMPLES_DIR_NAME);
    for path in get_paths_from_glob(&path) {
        let data = NotepadTabStat::from_path(&path).unwrap();
        assert!(
            !check_rtl(&data),
            "RTL is reported to be set, but it should't"
        );
        assert!(
            check_word_wrap(&data),
            "WordWrap is reported to be unset, but it should be"
        );
        assert!(
            check_is_saved(&data),
            "is_saved_file is reported to be unset, but it should be"
        );
    }
}

#[cfg(test)]
#[test]
fn tabstat_sample_saved_english_rtl_unset_big_file() {
    let path = format!(
        "./{}/saved/english/rtl_unset/big_file/*.bin",
        SAMPLES_DIR_NAME
    );
    for path in get_paths_from_glob(&path) {
        let data = NotepadTabStat::from_path(&path).unwrap();
        assert!(
            !check_rtl(&data),
            "RTL is reported to be set, but it should't"
        );
        assert!(
            check_word_wrap(&data),
            "WordWrap is reported to be unset, but it should be"
        );
        assert!(
            check_is_saved(&data),
            "is_saved_file is reported to be unset, but it should be"
        );
    }
}

#[cfg(test)]
#[test]
fn tabstat_sample_not_saved_english_rtl_unset() {
    let path = format!("./{}/not_saved/english/rtl_unset/*.bin", SAMPLES_DIR_NAME);
    for path in get_paths_from_glob(&path) {
        let data = NotepadTabStat::from_path(&path).unwrap();
        assert!(
            !check_rtl(&data),
            "RTL is reported to be set, but it should't"
        );
        assert!(
            !check_is_saved(&data),
            "is_saved_file is reported to be set, but it should't"
        );
        assert!(
            check_word_wrap(&data),
            "WordWrap is reported to be unset, but it should be"
        );
    }
}

// End: English language tests
// Start: Arabic language test

#[cfg(test)]
#[test]
fn tabstat_sample_not_saved_arabic_rtl_set() {
    let path = format!("./{}/not_saved/arabic/rtl_set/*.bin", SAMPLES_DIR_NAME);
    for path in get_paths_from_glob(&path) {
        let data = NotepadTabStat::from_path(&path).unwrap();
        // RTL is ignored here, it is set to `true` in notepad. but it is not writen to the tabstate file. Writen after closing the window?
        // assert!(
        //     check_rtl(&data),
        //     "RTL is reported to be set, but it should't"
        // );
        assert!(
            !check_is_saved(&data),
            "is_saved_file is reported to be set, but it should't"
        );
        assert!(
            check_word_wrap(&data),
            "WordWrap is reported to be unset, but it should be"
        );
    }
}

#[cfg(test)]
#[test]
fn tabstat_sample_saved_arabic_rtl_set() {
    let path = format!("./{}/saved/arabic/rtl_set/*.bin", SAMPLES_DIR_NAME);
    for path in get_paths_from_glob(&path) {
        let data = NotepadTabStat::from_path(&path).unwrap();
        // RTL is ignored here, it is set to `true` in notepad. but it is not writen to the tabstate file. Writen after closing the window?
        // assert!(
        //     check_rtl(&data),
        //     "RTL is reported to be set, but it should't"
        // );
        assert!(
            check_is_saved(&data),
            "is_saved_file is reported to be set, but it should't"
        );
        assert!(
            check_word_wrap(&data),
            "WordWrap is reported to be unset, but it should be"
        );
    }
}

#[cfg(test)]
#[test]
fn tabstat_sample_saved_arabic_rtl_set_big_file() {
    let path = format!("./{}/saved/arabic/rtl_set/big_file/*.bin", SAMPLES_DIR_NAME);
    for path in get_paths_from_glob(&path) {
        let data = NotepadTabStat::from_path(&path).unwrap();
        // RTL is ignored here, it is set to `true` in notepad. but it is not writen to the tabstate file. Writen after closing the window?
        // assert!(
        //     check_rtl(&data),
        //     "RTL is reported to be set, but it should't"
        // );
        assert!(
            check_is_saved(&data),
            "is_saved_file is reported to be set, but it should't"
        );
        assert!(
            check_word_wrap(&data),
            "WordWrap is reported to be unset, but it should be"
        );
    }
}

#[cfg(test)]
#[test]
fn tabstat_sample_saved_arabic_unsaved_mod() {
    let path = format!("./{}/saved/arabic/unsaved_mod/*.bin", SAMPLES_DIR_NAME);
    for path in get_paths_from_glob(&path) {
        let data = NotepadTabStat::from_path(&path).unwrap();
        let json = serde_json::to_string_pretty(&data).unwrap();
        println!("{}", json);
        // RTL is ignored here, it is set to `true` in notepad. but it is not writen to the tabstate file. Writen after closing the window?
        // assert!(
        //     check_rtl(&data),
        //     "RTL is reported to be set, but it should't"
        // );

        assert!(
            check_is_saved(&data),
            "is_saved_file is reported to be set, but it should't"
        );
        // Not updated if the window still open?
        // assert!(
        //     check_contain_unsaved_data(&data),
        //     "contain_unsaved_data is reported to be unset, but it should be"
        // );
        assert!(
            check_word_wrap(&data),
            "WordWrap is reported to be unset, but it should be"
        );
    }
}

// End: Arabic language test
